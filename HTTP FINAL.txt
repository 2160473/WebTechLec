World Wide Web
	- THE WEB MAKES USE OF THE INTERCONNECTIVITY STRUCTURE OF THE INTERNET AND IS NOT THE INTERNET ITSELF.
	- A collection of web resources and applications via the Internet (Internetwork “connection across boundaries”)
	- Contains hypermedia; one document that contains links to other documents.
	- Considered to be today’s greatest information system
	- Inventor: Tim Berners-Lee (1989), he worked at CERN(Conseil Européen pour la Recherche Nucléaire) and was appointed as a knight. He was the one who thought of 
	  putting HTTP, HTML and URL together but did not invent each.
	- Early motivation for the creation of the World Wide Web was for sharing of scientific papers
	- Web Resources can be static, already existing, or dynamic, produced on the fly, example is search engine results.
	- “SPIDERS” are applications that crawls the web to gather as much information as possible
	- Other platforms that did not win over the www are Gopher(Menu Based) and WAIS (Wide Area Information Server)

How does the World Wide Web work?
URLS:
	- Way of addressing the various web resources
	- Humans are not good at remembering numbers, so we associate descriptive names to websites/pages to remember better

DNS: 
	- Allows mapping a hostname to an IP address

ADDITIONAL INFO:
Web Debugger Proxy:
	- Eavesdrops on web communications

User-Agent:
	- Indicate what type of device is trying to access the resource
	- Remember that a mobile browser differs from a web browser

Hypermedia:
	- one document tht contains links to other documents

Static Resource
	- exists in the form that you are accessing it

Dynamic Resource
	- dynamic resource is produced on the fly
		e.g. google's search results page

-----------------------------------------------------------------------------------------------------------------------------------------

HTTP (Hypertext Transfer Protocol)
	- Application layer communications protocol used to access resources on the World Wide Web
	- Inventor: Tim Berners Lee at CERN(Conseil Européen pour la Recherche Nucléaire) in 1989
	- Jointly Developed by the W3C (World Wide Web Consortium) and IETF (Internet Engineering Task Force)
	- A stateless pull protocol that retrieves web resources

•Data Packets = Chunks of data
•If you can send binary, you can send anything
•Promiscuous Mode = Getting packets not meant for you


HTTP VERSIONS:

1. HTTP 0.9 - The oneline protocol
	    - How it works: Connect -> Request (GET + IP Address) -> Response (HTML) -> Disconnect

2. HTTP 1.0 - status code definitions and header field definitions were introduced. 

3. HTTP 1.1 - standardized protocol
	    - included the following improvements:
		- compression of data
		- persistent connection
		- support for chunk responses
		- content negotiation
	    - improvements helped reduce the latency of accessing web resources

4. HTTP 2   - Binary protocol rather than text. 
	    - Parallel requests can now be handled.
	    - Server Push is an added feature that volunteers information to the client. The intention is to lessen load time since the server would send all 
	      the resources need already
	    - Pipelining, which sends requests continuously instead of waiting for the response before being able to make another request
	 goal: transfer resources faster over the world wide web


HTTP FUNDAMENTALS:
	- A client-server architecture
	- Stateless communications protocol that does not keep client requests
	- HTTP uses a request-response standard protocol
		- 

	*HTTP runs on top of TCP/IP
 	 - Port 80: HTTP
	 - Port 443: HTTPS
	
	*HTTPS (HTTP over SSL/TLS)
	 - Encrypts information that would be decrypted once received by the requestor

	 - HTTP provides support for the following functionalities:
	 
	1. Cache Control 
	- having a copy in the local storage speeds up things

	2. Content Media Type Specification 
	- is negotiated between the client and the server
	- how we specify the type of resource

	3. Content Negotiation
	- mechanisms that make it possible to serve different versions of a document
	- includes media type, language, etc

	4. Content / Transfer Codings
	-perform some transformation of the content before you send it,e.g compression (ZIP)

	5. Client Server Protocol Negotiations
	-how clients and servers negotiate between themselves and switch protocols

	6. Persistent connections
	- was introduced in HHTP 1.1

	7. Request Pipelining/multiplexing
 	- this allows clients to make multiple requests without waiting for each response

HTTP RESOURCE ADDRESSING:
-resources in HTTP are identified using URI's (Uniform Resource Identifier) 
 * to access something on the web you must identify its location
 * script - reads profile data from a database

Scheme
 - either http or https

Authority
 - authentication credentials / user information 
 - host: domain name of the server where the resource resides, or where the resource will be created

Path to resource 
 - may refer to a static or dynamic resource

Query
 - typically provided as key=value pairs with ampersand separators between key value pairs

Fragment identifier
 - points to a subordinate resource

HTTP REQUEST MESSAGE STRUCTURE:
 - request line = method + request target + protocol version
 - message header = general/request/entity
 - empty line
 - message body Or the payload(optional)

HTTP RESPONSE MESSAGE STRUCTURE:
 - status line = protocol version + status code + reason phrase
 - message headers
 - empty line
 - message body 

HTTP REQUEST METHODS:
 - indicates the desired action to be performed for a given resource

I. Standard methods
 
1.GET 
 - retrieved resource is returned in the message body of the response as an entity
 - most commonly used HTTP method

2. HEAD
 - identical to the GET method except that the server does not send a nessage body in the response 
 - used to retrieve metadata

3. POST
 - used in submitting HTML form data

4.PUT 
 - create or replace the state of the target resource with the state defined by the representation enclosed in the request message payload

5. DELETE 
 - removes connection/association between the target resource and its current functionality

6. OPTIONS
 - this method allows clients to determine the options and/or requirements associated with a resource

7. TRACE
 - requests a remote application-level loop back to the request message

8. CONNECT 
 - commonly used to create an end-to-end virtual connection

II. Method Properties
 1. Safe Methods - client does not make a request and does not expect any state change  
	- GET, HEAD, OPTIONS, TRACE

 2. Idempotent Methods - methods can be called several times, but with no change in the outcomes. 
 		       - A method can be called once, twice, or ten times over but the result stays the same. 
	- GET, HEAD, OPTIONS, TRACE, PUT, DELETE

 3. Cacheable Methods - indicates that the response to a method is allowed to be stored for future reuse
	- GET, HEAD, POST


HTTP MESSAGE HEADERS:
1. General Header Fields - used by both clients and servers

2. Request Header Fields - messages generated by clients

3. Response Header Fields - found only in response messages (Servers)

4. Entity Header Fields - refers to the entities
-Allow, Content-Encoding, Content-Language, Content-Length, Content-Location, Content-Range, Content-Type

HTTP STATUS CODES
- issued by the server in response to a request made by the client

I. Informational (1xx)
100 Continue
101 Switching Protocols
102 Processing

II. Success (2xx)
200 OK
201 Created
202 Accepted
203 Non-authoritative Information
204 No Content
205 Reset Content
206 Partial Content
207 Multi-Status
208 Already Reported
226 IM Used

III. Redirection (3xx)
300 Multiple Choices
301 Moved Permanently
302 Found
303 See Other
304 Not Modified
305 Use Proxy
307 Temporary Redirect
308 Permanent Redirect

IV. Client-Error (4xx)
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406 Not Acceptable
407 Proxy Authentication Required
408 Request Timeout
409 Conflict
410 Gone
411 Length Required
412 Precondition Failed
413 Payload Too Large
414 Request-URI Too Long
415 Unsupported Media Type
416 Requested Range Not Satisfiable
417 Expectation Failed
418 I'm a teapot
421 Misdirected Request
422 Unprocessable Entity
423 Locked
424 Failed Dependency
426 Upgrade Required
428 Precondition Required
429 Too Many Requests
431 Request Header Fields Too Large
444 Connection Closed Without Response
451 Unavailable For Legal Reasons
499 Client Closed Request

V. Server-Error (5xx)
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
506 Variant Also Negotiates
507 Insufficient Storage
508 Loop Detected
510 Not Extended
511 Network Authentication Required
599 Network Connect Timeout Error

HTTP EXTENSIONS
- Enables the defining of new request methods, message headers or status codes.
- WebDAV(Web Distributed Authoring and Versioning) is one such extension.

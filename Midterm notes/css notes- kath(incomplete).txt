CSS HISTORY
 -written by Marc Andreesen in 1994 
 - declarative programming language
	- rules for the HTML documentare described one by one and browses handle the rendering


CSS RULE PREFERENCE
 - mag-aadd pa ako dito 
 
 
CSS DECLARATIONS

- a CSS rule-set is divided into two; a selector and a declaration block

h1 (selector) {color:yellow; font-size:14px;} (declaration)
               property -- value -- property --value
Selector - points to the HTML element you want to style
Declaration Block - contains one or more declarations separated by semi-colons

** CSS Declarations always end with a semi-colon

A. Shorthand Properties
     - allows authors to specify multiple values
     - one example of a shorthand property is the CSS background propery, that able's to define values of
	-background-color
	-background-image
	-background-repeat
	-background-position
 * another example
	font-style: italic;
	font-weight: bold;
	font-size: .10em;
	line-height: 1.4;
	font-family; Arial, helvetica;
    this can be shortened to: font: talic bold .10em/1.4 Arial, helvetica;

** CSS has a universal shorthand property "all"
	-this applies its value to every property in the document
	1. inherit - Sets the property value applied to a selected element to be the same as that of its parent element.
	2. initial - Sets the property value applied to a selected element to be the same as the value set for that element in the browser's default style sheet. If no value is set by the browser's default style sheet and the property is naturally inherited, then the property value is set to inherit instead.
	3. revert - Reverts the property to the value it would have had if the current origin had not applied any styles to it. In other words, the property's value is set to the user stylesheet's value for the property (if one is set), otherwise the property's value is taken from the user-agent's default stylesheet.
	4. unset - Resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.



example:
body {
  color: green;
}

.inherit a {
  color: inherit;
}

.initial a {
  color: initial;
}

.unset a {
  color: unset;
}



B. Atomic Properties / Individual Properties





*Vendor Specific Extensions



------------------------------------------
<!-- exact things written in m notes, will edit into a more understandable block of info -->
<!-- ako rin lang naman mamomroblema since ako magbibigay kung ano istura ng website -->

Scripting:
1. Client-side
	- browser
	- user agents
	- using : Javasctipt
	- alternatives: flash, applets, activeX

2. Server-side

-----------------------------

Javascript
	- most used scripting language for client side web scripting
	- fetched w/ other webpage resources
	- execution : browser





LINKING SCRIPTS:
  sCRIPT ELEMENT

	<script type = "text/javascript" src = "path/to/script.js"> </script>
	-can be placed anywhere
	- before rendering can continue, scripts must be fetched, compiled and executed
	- functionality used upon interaction
	
	**Mobile: impatient people; connectivity issues
	** First page slowly loading -> other website
	
	EXTENSIONS: DEFER VS ASYNC	
		- attributes

	Defer : fetch the sript while rendering; execute after render finishes
	Async: Fetch then render; upon availability, execute

	** browsers may have no support for attributes
		alternative solution: place at the end of the document

	EMBED a.k.a. Internal Script
		- can be placed anywhere in the document
	<scipt ...> </script


	2 Types of Javascript 
		1. Top-level (outside of functions) - executed as script is loaded, when encountered
		2. inside functions - only executed when invoked.


	Inline scripts
		- inside html elements
		- event attributes
			- starts with "on" (e.g. onClick)
		- "alert()" -> dialog box

	<noscript> element: alternative content (if browser doesn't support scripting / disabled)

-------------------------------------

JS Exec environment
	-> all codes combined and associated with a page (only 1 page)
	-> local storage

----------------------------------
Client-side
	1. Core Javascript (EcmaScript)
		<!-- Ecma-262; Mdn-javascript @ Netscape -->
		Languages & API

	2. BOM API (non-standard)
		- window(global), navigator(browser itself), screen (current screen), location (URL), History (browser history)

	3. DOM : elements 
	4. Misc
		- Geolocation, IndexedDB, Local Storage, Push Notif, ServiceWorkers, Sockets, Work(di ko maintindihan sulat ko jusq), XMLHttpRequest (AJAX)

-------------------------------
DOM
	-access to HTML document w/in scipts associated with webpages
	-> W3C dom 
	Interfaces: type, nodes (primary data type)
	
	Document Type - nodes

	DOM -> text vs CSSOM -> elements
---------------------
Funcionalities:
	Acess NodeName == tagname
	nodeType = 1 (element node)
	nodeValue = null -> elements : always null
	a


